from django.shortcuts import render
from django.views.generic.base import TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.conf import settings
from .models import ModuleData
import json
from decimal import Decimal

status= [
    { "title": "현재 날짜","id":"today", "value": "", "unit": "", "icon_class": "fas fa-calendar-alt" },
    { "title": "현재 시간","id":"todayclock", "value": "", "unit": "", "icon_class": "fas fa-clock" },
    { "title": "현재 발전량", "id":"","value": "672", "unit": "kW", "icon_class": "fas fa-bolt" },
    { "title": "발전 시간", "id":"","value": "10", "unit": "시간", "icon_class": "fas fa-clock" },
    { "title": "누적 발전량", "id":"","value": "3,000", "unit": "MWh", "icon_class": "fas fa-solar-panel" },
    { "title": "수익", "id":"","value": "79,000", "unit": "원", "icon_class": "fas fa-money-bill-alt" },
]

table_data = [
		{ "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 8시", "발전량": "301kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "하하" },
        { "시간": "2022년 11월 2일 6시", "발전량": "302kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 13일 6시", "발전량": "310kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "450kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "365kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "323kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "123kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "310kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "604kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "343kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "245kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "335kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "245kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "446kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "356kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "1kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "1000kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
        { "시간": "2022년 10월 1일 6시", "발전량": "300kw", "발전량 상태": "부족", "모듈온도": "20℃", "모듈 온도 상태": "낮음" },
	]


# class pow_gen(LoginRequiredMixin, TemplateView):
#     login_url = settings.LOGIN_URL

#     def get_context_data(self, **kwargs):
#         context = super().get_context_data(**kwargs)

#         queryset = ModuleData.objects.values()
#         # queryset_float = float(queryset.values)

#         context['datas'] = json.dumps(list(queryset))
#         return context

class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Decimal):
            return float(obj)
        return json.JSONEncoder.default(self, obj)

class pow_gen(LoginRequiredMixin, TemplateView):
    login_url = settings.LOGIN_URL

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        queryset = ModuleData.objects.values('dt', 'dc_kw1')
        # queryset_float = float(queryset.values)

        context['datas'] = json.dumps(list(queryset), cls=DecimalEncoder)
        return context